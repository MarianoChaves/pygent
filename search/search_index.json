{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pygent Pygent is a minimal coding assistant that runs tasks inside an isolated Docker container whenever available. If Docker is not configured the commands run locally. This manual summarises the main commands and configuration options. See Getting Started for a quick tutorial or jump to the API Reference for details about the available classes. Installation pip install -e . Python \u2265 3.9 is required. Docker is optional; install pygent[docker] to enable container execution. Adjust the OPENAI_API_KEY , PYGENT_MODEL , PYGENT_IMAGE and PYGENT_USE_DOCKER variables as needed. Basic usage Start an interactive session by running pygent in the terminal. Use the --docker option to run commands in a container (requires pygent[docker] ); otherwise they execute locally. Use /exit to quit. You can also use the Python API: from pygent import Agent ag = Agent() ag.step(\"echo test\") ag.runtime.cleanup() Development Install optional dependencies with pip install -e .[test,docs] and run pytest to execute the tests. Use mkdocs serve to build this documentation locally. See the README file for more detailed information.","title":"Home"},{"location":"#pygent","text":"Pygent is a minimal coding assistant that runs tasks inside an isolated Docker container whenever available. If Docker is not configured the commands run locally. This manual summarises the main commands and configuration options. See Getting Started for a quick tutorial or jump to the API Reference for details about the available classes.","title":"Pygent"},{"location":"#installation","text":"pip install -e . Python \u2265 3.9 is required. Docker is optional; install pygent[docker] to enable container execution. Adjust the OPENAI_API_KEY , PYGENT_MODEL , PYGENT_IMAGE and PYGENT_USE_DOCKER variables as needed.","title":"Installation"},{"location":"#basic-usage","text":"Start an interactive session by running pygent in the terminal. Use the --docker option to run commands in a container (requires pygent[docker] ); otherwise they execute locally. Use /exit to quit. You can also use the Python API: from pygent import Agent ag = Agent() ag.step(\"echo test\") ag.runtime.cleanup()","title":"Basic usage"},{"location":"#development","text":"Install optional dependencies with pip install -e .[test,docs] and run pytest to execute the tests. Use mkdocs serve to build this documentation locally. See the README file for more detailed information.","title":"Development"},{"location":"api-reference/","text":"API Reference This section summarises the most relevant classes and functions. Agent from pygent import Agent The main entry point for interacting with Pygent. It keeps a conversation history and exposes a step() method to process user messages. Tool calls are automatically executed and their output appended to the history. Each Agent owns a Runtime instance stored in agent.runtime . Agent.step(user_msg: str) -> None Adds the message to the conversation, queries the model and prints any tool output. run_interactive(use_docker: bool | None = None) -> None Launches an interactive shell similar to the command line interface. Runtime Handles command execution either in a Docker container or locally. Important methods include: bash(cmd: str, timeout: int = 30) -> str \u2013 run a shell command and return its combined output. write_file(path: str, content: str) -> str \u2013 create or replace a file inside the working directory. cleanup() -> None \u2013 destroy the temporary workspace and stop the container if used. Tools The agent can call two built-in tools: bash \u2013 executes shell commands via Runtime.bash . write_file \u2013 writes files through Runtime.write_file . Refer to the tools.py module for the implementation details.","title":"API Reference"},{"location":"api-reference/#api-reference","text":"This section summarises the most relevant classes and functions.","title":"API Reference"},{"location":"api-reference/#agent","text":"from pygent import Agent The main entry point for interacting with Pygent. It keeps a conversation history and exposes a step() method to process user messages. Tool calls are automatically executed and their output appended to the history. Each Agent owns a Runtime instance stored in agent.runtime .","title":"Agent"},{"location":"api-reference/#agentstepuser_msg-str-none","text":"Adds the message to the conversation, queries the model and prints any tool output.","title":"Agent.step(user_msg: str) -&gt; None"},{"location":"api-reference/#run_interactiveuse_docker-bool-none-none-none","text":"Launches an interactive shell similar to the command line interface.","title":"run_interactive(use_docker: bool | None = None) -&gt; None"},{"location":"api-reference/#runtime","text":"Handles command execution either in a Docker container or locally. Important methods include: bash(cmd: str, timeout: int = 30) -> str \u2013 run a shell command and return its combined output. write_file(path: str, content: str) -> str \u2013 create or replace a file inside the working directory. cleanup() -> None \u2013 destroy the temporary workspace and stop the container if used.","title":"Runtime"},{"location":"api-reference/#tools","text":"The agent can call two built-in tools: bash \u2013 executes shell commands via Runtime.bash . write_file \u2013 writes files through Runtime.write_file . Refer to the tools.py module for the implementation details.","title":"Tools"},{"location":"getting-started/","text":"Getting Started This tutorial shows how to install Pygent and run a few basic commands. It also demonstrates how to use the Python API directly. Installation Install from source in editable mode so the command line and Python modules are available: pip install -e .[docker] Docker is optional. If it is not available omit the [docker] extras and commands will run locally. Interactive session Start the CLI by running pygent . Type normal instructions and each command will be executed in a sandboxed environment. $ pygent --docker vc> echo \"Hello\" Use /exit to leave the session. Using the API The Agent class exposes the same functionality programmatically. Here is a minimal example: from pygent import Agent ag = Agent() ag.step(\"echo 'Hello World'\") # additional steps... ag.runtime.cleanup() Check the examples/ directory for more advanced scripts.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"This tutorial shows how to install Pygent and run a few basic commands. It also demonstrates how to use the Python API directly.","title":"Getting Started"},{"location":"getting-started/#installation","text":"Install from source in editable mode so the command line and Python modules are available: pip install -e .[docker] Docker is optional. If it is not available omit the [docker] extras and commands will run locally.","title":"Installation"},{"location":"getting-started/#interactive-session","text":"Start the CLI by running pygent . Type normal instructions and each command will be executed in a sandboxed environment. $ pygent --docker vc> echo \"Hello\" Use /exit to leave the session.","title":"Interactive session"},{"location":"getting-started/#using-the-api","text":"The Agent class exposes the same functionality programmatically. Here is a minimal example: from pygent import Agent ag = Agent() ag.step(\"echo 'Hello World'\") # additional steps... ag.runtime.cleanup() Check the examples/ directory for more advanced scripts.","title":"Using the API"}]}