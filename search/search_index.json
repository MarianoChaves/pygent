{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pygent Pygent is a minimal coding assistant that runs tasks inside an isolated Docker container whenever available. If Docker is not configured the commands run locally. This manual summarises the main commands and configuration options. See Configuration for a list of environment variables. The latest version of this guide is published online at marianochaves.github.io/pygent . See the Examples section for runnable scripts. See Getting Started for a quick tutorial or jump to the API Reference for details about the available classes. Installation pip install pygent Python \u2265 3.9 is required. Docker is optional; install pygent[docker] to enable container execution. The default model is gpt-4.1-mini . Basic usage Start an interactive session by running pygent in the terminal. Use the --docker option to run commands in a container (requires pygent[docker] ); otherwise they execute locally. Use /exit to quit. Alternatively run pygent-ui for a simple web interface (requires pygent[ui] ). You can also use the Python API: from pygent import Agent ag = Agent() ag.step(\"echo test\") ag.runtime.cleanup() Custom models are supported by implementing the Model protocol and passing the instance to Agent . Development Install optional dependencies with pip install -e .[test,docs] and run pytest to execute the tests. Use mkdocs serve to build this documentation locally. See the README file for more detailed information.","title":"Home"},{"location":"#pygent","text":"Pygent is a minimal coding assistant that runs tasks inside an isolated Docker container whenever available. If Docker is not configured the commands run locally. This manual summarises the main commands and configuration options. See Configuration for a list of environment variables. The latest version of this guide is published online at marianochaves.github.io/pygent . See the Examples section for runnable scripts. See Getting Started for a quick tutorial or jump to the API Reference for details about the available classes.","title":"Pygent"},{"location":"#installation","text":"pip install pygent Python \u2265 3.9 is required. Docker is optional; install pygent[docker] to enable container execution. The default model is gpt-4.1-mini .","title":"Installation"},{"location":"#basic-usage","text":"Start an interactive session by running pygent in the terminal. Use the --docker option to run commands in a container (requires pygent[docker] ); otherwise they execute locally. Use /exit to quit. Alternatively run pygent-ui for a simple web interface (requires pygent[ui] ). You can also use the Python API: from pygent import Agent ag = Agent() ag.step(\"echo test\") ag.runtime.cleanup() Custom models are supported by implementing the Model protocol and passing the instance to Agent .","title":"Basic usage"},{"location":"#development","text":"Install optional dependencies with pip install -e .[test,docs] and run pytest to execute the tests. Use mkdocs serve to build this documentation locally. See the README file for more detailed information.","title":"Development"},{"location":"api-reference/","text":"API Reference This section summarises the most relevant classes and functions. Agent from pygent import Agent Manages the conversation with the model. Each instance owns a Runtime accessible via agent.runtime . Methods step(user_msg: str) -> None \u2013 add a message, run tools and print their output. run_interactive(use_docker: bool | None = None) -> None \u2013 start an interactive session. run_gui(use_docker: bool | None = None) -> None \u2013 start a simple web interface. Runtime Executes commands either in a Docker container or locally. Methods bash(cmd: str, timeout: int = 30) -> str \u2013 run a shell command and return its output. write_file(path: str, content: str) -> str \u2013 create or replace a UTF-8 encoded text file in the working directory. cleanup() -> None \u2013 destroy the temporary workspace and stop the container if used. Tools The agent can call two built-in tools: bash \u2013 executes shell commands via Runtime.bash . write_file \u2013 writes files through Runtime.write_file . Refer to the tools.py module for the implementation details. Custom models The Agent relies on a model object with a chat method. The default is OpenAIModel which calls an OpenAI-compatible API. To plug in a different backend, implement the Model protocol and pass an instance when creating the agent.","title":"API Reference"},{"location":"api-reference/#api-reference","text":"This section summarises the most relevant classes and functions.","title":"API Reference"},{"location":"api-reference/#agent","text":"from pygent import Agent Manages the conversation with the model. Each instance owns a Runtime accessible via agent.runtime . Methods step(user_msg: str) -> None \u2013 add a message, run tools and print their output. run_interactive(use_docker: bool | None = None) -> None \u2013 start an interactive session. run_gui(use_docker: bool | None = None) -> None \u2013 start a simple web interface.","title":"Agent"},{"location":"api-reference/#runtime","text":"Executes commands either in a Docker container or locally. Methods bash(cmd: str, timeout: int = 30) -> str \u2013 run a shell command and return its output. write_file(path: str, content: str) -> str \u2013 create or replace a UTF-8 encoded text file in the working directory. cleanup() -> None \u2013 destroy the temporary workspace and stop the container if used.","title":"Runtime"},{"location":"api-reference/#tools","text":"The agent can call two built-in tools: bash \u2013 executes shell commands via Runtime.bash . write_file \u2013 writes files through Runtime.write_file . Refer to the tools.py module for the implementation details.","title":"Tools"},{"location":"api-reference/#custom-models","text":"The Agent relies on a model object with a chat method. The default is OpenAIModel which calls an OpenAI-compatible API. To plug in a different backend, implement the Model protocol and pass an instance when creating the agent.","title":"Custom models"},{"location":"configuration/","text":"Configuration This page summarises the environment variables that control Pygent. They can be exported in your shell or set via a .env file before running the CLI. Variable Description Default OPENAI_API_KEY API key for OpenAI or any compatible service. \u2013 OPENAI_BASE_URL Base URL for the API endpoint. https://api.openai.com/v1 PYGENT_MODEL Model name used for requests. gpt-4.1-mini PYGENT_IMAGE Docker image used for sandboxed execution. python:3.12-slim PYGENT_USE_DOCKER Set to 0 to run commands locally. Otherwise the runtime will try to use Docker if available. auto See Getting Started for installation instructions and the API Reference for details about the available classes.","title":"Configuration"},{"location":"configuration/#configuration","text":"This page summarises the environment variables that control Pygent. They can be exported in your shell or set via a .env file before running the CLI. Variable Description Default OPENAI_API_KEY API key for OpenAI or any compatible service. \u2013 OPENAI_BASE_URL Base URL for the API endpoint. https://api.openai.com/v1 PYGENT_MODEL Model name used for requests. gpt-4.1-mini PYGENT_IMAGE Docker image used for sandboxed execution. python:3.12-slim PYGENT_USE_DOCKER Set to 0 to run commands locally. Otherwise the runtime will try to use Docker if available. auto See Getting Started for installation instructions and the API Reference for details about the available classes.","title":"Configuration"},{"location":"examples/","text":"Examples This page collects small scripts demonstrating different aspects of Pygent. Each link points to the source file on GitHub. api_example.py \u2013 minimal use of the :class: ~pygent.agent.Agent API. runtime_example.py \u2013 using the :class: ~pygent.runtime.Runtime class directly. write_file_demo.py \u2013 calling the built-in tools from Python code. custom_model.py \u2013 implementing a simple custom model. Run these with python <script> from the project root. They expect the environment variables described in the Configuration page.","title":"Examples"},{"location":"examples/#examples","text":"This page collects small scripts demonstrating different aspects of Pygent. Each link points to the source file on GitHub. api_example.py \u2013 minimal use of the :class: ~pygent.agent.Agent API. runtime_example.py \u2013 using the :class: ~pygent.runtime.Runtime class directly. write_file_demo.py \u2013 calling the built-in tools from Python code. custom_model.py \u2013 implementing a simple custom model. Run these with python <script> from the project root. They expect the environment variables described in the Configuration page.","title":"Examples"},{"location":"getting-started/","text":"Getting Started Pygent is a minimalist coding assistant that runs shell commands inside a sandboxed environment. By default a Docker container is used, but if Docker is unavailable the commands run locally instead. This page shows how to install the package and gives a few examples covering the main features. Installation Install from source in editable mode so the CLI and Python modules are available. Include the optional extras to enable Docker support and the web UI: pip install pygent[docker,ui] Python 3.9 or newer is required. If Docker is not installed omit the [docker] extras and commands will run on the host system. Interactive session Start an interactive session by running pygent in a terminal. Use the --docker flag to force container execution or --no-docker to run locally. $ pygent --docker vc> echo \"Hello\" Each message is executed in the sandbox and the output printed. Use /exit to leave the session. You can also launch a simple web interface with pygent-ui (requires the ui extra). Tool usage During the conversation the assistant can call two built-in tools: bash to run shell commands and write_file to create files inside the workspace. For example: vc> write_file path=\"hello.txt\" content=\"Hello from Pygent\" vc> bash cmd=\"cat hello.txt\" Using the API The same functionality is accessible programmatically via the Agent class: from pygent import Agent ag = Agent() ag.step(\"echo 'Hello World'\") ag.runtime.cleanup() See api_example.py for a complete script. Additional examples show how to implement a custom model and how to interact with the Runtime class directly. Configuration Pygent communicates with the model through an OpenAI\u2011compatible API. Export your API key before running the assistant. A full list of environment variables is available in the Configuration page. For full control you may pass a custom model implementation to Agent . The file custom_model.py contains a minimal echo model example. Additional examples Several scripts in the examples/ directory showcase different parts of the package (see the dedicated Examples page): api_example.py \u2013 minimal use of the :class: ~pygent.agent.Agent API. runtime_example.py \u2013 running commands through the :class: ~pygent.runtime.Runtime class directly. write_file_demo.py \u2013 calling the built-in tools from Python code. custom_model.py \u2013 plugging in a custom model. Below is the custom model snippet for reference: from pygent import Agent, openai_compat class EchoModel: def chat(self, messages, model, tools): last = messages[-1][\"content\"] return openai_compat.Message(role=\"assistant\", content=f\"Echo: {last}\") ag = Agent(model=EchoModel()) ag.step(\"test\") ag.runtime.cleanup() See the API reference for the complete list of classes and configuration options.","title":"Getting Started"},{"location":"getting-started/#getting-started","text":"Pygent is a minimalist coding assistant that runs shell commands inside a sandboxed environment. By default a Docker container is used, but if Docker is unavailable the commands run locally instead. This page shows how to install the package and gives a few examples covering the main features.","title":"Getting Started"},{"location":"getting-started/#installation","text":"Install from source in editable mode so the CLI and Python modules are available. Include the optional extras to enable Docker support and the web UI: pip install pygent[docker,ui] Python 3.9 or newer is required. If Docker is not installed omit the [docker] extras and commands will run on the host system.","title":"Installation"},{"location":"getting-started/#interactive-session","text":"Start an interactive session by running pygent in a terminal. Use the --docker flag to force container execution or --no-docker to run locally. $ pygent --docker vc> echo \"Hello\" Each message is executed in the sandbox and the output printed. Use /exit to leave the session. You can also launch a simple web interface with pygent-ui (requires the ui extra).","title":"Interactive session"},{"location":"getting-started/#tool-usage","text":"During the conversation the assistant can call two built-in tools: bash to run shell commands and write_file to create files inside the workspace. For example: vc> write_file path=\"hello.txt\" content=\"Hello from Pygent\" vc> bash cmd=\"cat hello.txt\"","title":"Tool usage"},{"location":"getting-started/#using-the-api","text":"The same functionality is accessible programmatically via the Agent class: from pygent import Agent ag = Agent() ag.step(\"echo 'Hello World'\") ag.runtime.cleanup() See api_example.py for a complete script. Additional examples show how to implement a custom model and how to interact with the Runtime class directly.","title":"Using the API"},{"location":"getting-started/#configuration","text":"Pygent communicates with the model through an OpenAI\u2011compatible API. Export your API key before running the assistant. A full list of environment variables is available in the Configuration page. For full control you may pass a custom model implementation to Agent . The file custom_model.py contains a minimal echo model example.","title":"Configuration"},{"location":"getting-started/#additional-examples","text":"Several scripts in the examples/ directory showcase different parts of the package (see the dedicated Examples page): api_example.py \u2013 minimal use of the :class: ~pygent.agent.Agent API. runtime_example.py \u2013 running commands through the :class: ~pygent.runtime.Runtime class directly. write_file_demo.py \u2013 calling the built-in tools from Python code. custom_model.py \u2013 plugging in a custom model. Below is the custom model snippet for reference: from pygent import Agent, openai_compat class EchoModel: def chat(self, messages, model, tools): last = messages[-1][\"content\"] return openai_compat.Message(role=\"assistant\", content=f\"Echo: {last}\") ag = Agent(model=EchoModel()) ag.step(\"test\") ag.runtime.cleanup() See the API reference for the complete list of classes and configuration options.","title":"Additional examples"}]}